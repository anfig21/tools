function [H,rs,N] = dictionaryRange(c,f,r,r0,uk,rMinMax,Res)
%[H,rs,N] = dictionaryRange(f,r,r0,uk,rMinMax,Res) Obtains the H matrix for
% a sound field at positions given by r, comprised of spherical waves
% generated by point sources placed along the line at the direction given
% by the unit vector uk and the limits rMinMax. The monopoles are located
% at a distance Res apart from each other.
%   Input:
%       - c         : speed of sound (m/s). Scalar
%       - f         : frequency (Hz). Nf x 1
%       - r         : point where the dictionary is created. 3 x M
%       - r0        : center of the spherical array. 3 x 1
%       - uk        : DOA. 1 x 3
%       - rMinMax   : minimum and maximum distances to the source. 2 x 1
%       - Res       : spatial resolution in meters. Scalar
%   Output:
%       - H         : dictionary. N x Nf
%       - rs        : position of the point sources. 3 x N
%       - N         : number of point sources. Scalar
%
% Author: Antonio Figueroa Dur√°n
% Date: March 2022

%% ERROR HANDLING
if nargin < 6, error('dictionaryRange Error: Not enough input parameters.'), end

%% MAIN CODE
% Position of the candidate sources
rs = r0+uk'*(rMinMax(1):Res:rMinMax(2));

N = size(rs,2);
M = size(r,2);
Nf = length(f);

% Propagation vector
k = (2*pi*f)/c;

% Distance to the candidate sources
d = nan(M,N);
for nn = 1:N
    for mm = 1:M
        d(mm,nn) = vecnorm(rs(:,nn)-r(:,mm));
    end
end

% Dictionary
H = nan(M,N,Nf);
for ff = 1:Nf
    H(:,:,ff) = (1./d).*exp(-1i*d*k(ff));
%     H(:,:,ff) = (1./d.^2).*exp(-1i*d*k(ff));
%     H(:,:,ff) = exp(-1i*d*k(ff));
%     H(:,:,ff) = d.*exp(-1i*d*k(ff));
end

% Normalisation
% H = H./vecnorm(H,2,2);

end